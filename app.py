import streamlit as st
import os
import sqlite3
import google.generativeai as genai
import speech_recognition as sr
import tempfile
import pandas as pd
import numpy as np
import io
import wave
import datetime
import time
from dotenv import load_dotenv

# Import our project-specific modules
from document_processor import process_documents
from query_handler import process_query
from sql_fin_exp import InsuranceClaimsDatabase  # Import the new database class

# Try to import psutil for process detection, fallback if not available
try:
    import psutil

    PSUTIL_AVAILABLE = True
except ImportError:
    PSUTIL_AVAILABLE = False

# --- Initial Setup ---
load_dotenv()
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))
st.set_page_config(page_title="Document Processing & Chat", layout="wide")


# ############################################################################
# START OF PROVIDED CHATBOT CODE (INTEGRATED AND MODIFIED)
# ############################################################################

# Language translations for the entire interface
def get_interface_translations():
    """Get all interface text translations"""
    return {
        "English": {
            "main_title": "ЁЯОУ Insurance Claims Assistant",
            "subtitle": "Ask questions about insurance data using your voice or text",
            "chat_with_us": "ЁЯТм Chat with Us",
            "settings": "тЪЩя╕П Settings",
            "voice_settings": "ЁЯОд Voice Settings",
            "listen_duration": "How long should I listen? (seconds)",
            "voice_auto_submit_info": "ЁЯТб **Voice Auto-Submit:** Speak for more than 5 seconds and your question will be submitted automatically!",
            "need_help": "тЭУ Need Help?",
            "show_help_guide": "ЁЯУЪ Show Help Guide",
            "recent_searches": "ЁЯХР Recent Searches",
            "ask_question": "ЁЯТм Ask Your Question",
            "question_placeholder": "Type your question here and press Enter... (e.g., 'How many active policies are there?')",
            "submit": "Submit",
            "press_enter_hint": "ЁЯТб **Press Enter** to submit your question",
            "auto_submit_voice": "ЁЯЪА Auto-submitting your voice question...",
            "processing_selected": "ЁЯЪА Processing your selected question...",
            "processing_question": "тМия╕П Processing your question...",
            "finding_answer": "ЁЯФД Finding your answer...",
            "results_found": "ЁЯУК Here's what I found:",
            "found_results": "тЬЕ Found {count} result(s)",
            "no_results": "ЁЯдФ I couldn't find any results for your question.",
            "try_different": "ЁЯТб Try asking in a different way or use one of the popular questions below.",
            "something_wrong": "ЁЯШХ Something went wrong. Please try asking your question in a different way.",
            "try_these": "ЁЯТб **Try these instead:**",
            "ask_question_first": "тЪая╕П Please ask a question first!",
            "use_voice": "### ЁЯОд Or Use Your Voice",
            "voice_auto_hint": "ЁЯТб Speak for more than 5 seconds for automatic submission!",
            "voice_disabled": "ЁЯЪл **Voice input disabled due to microphone conflict**",
            "check_microphone": "ЁЯФД Check Microphone Again",
            "start_speaking": "ЁЯОд Start Speaking",
            "upload_audio": "ЁЯУБ Or Upload Audio File",
            "upload_hint": "ЁЯТб Supported formats: WAV (recommended), MP3, MP4, M4A тАв Max size: 25MB",
            "choose_audio": "Choose an audio file",
            "upload_help": "Upload a clear audio recording with your question. WAV format works best.",
            "file_too_large": "тЭМ File too large! Please upload a file smaller than 25MB.",
            "process_audio": "ЁЯФД Process Audio File",
            "processing_audio": "Processing your audio file...",
            "audio_success": "тЬЕ I heard: {text}",
            "audio_failed": "тЭМ Could not process your audio file.",
            "audio_solutions": "ЁЯТб **Try these solutions:**",
            "popular_questions": "ЁЯФе Popular Questions",
            "click_instant": "Click any question below for instant results!",
            "back_to_main": "тЖР Back to Main",
            "footer_text": "ЁЯОУ **Insurance Claims Assistant** | Ask questions naturally with voice or text",
            "footer_help": "ЁЯТб Need help? Click \"Chat with Us\" for instant support!",
            "quick_keywords": [
                "Voice Input Issues", "Database Questions", "How to Use",
                "Technical Problems", "Audio Upload", "Results Not Showing",
                "Getting Started", "Account Issues", "Performance Issues"
            ],
            "quick_queries": [
                "How many policies are active?",
                "Show all claims from Mumbai",
                "List insured persons with 'Diabetes' as a pre-existing condition",
                "What is the total approved amount for all claims?",
                "Show all rejected claims",
                "What are the details for claim CLM_001?"
            ]
        },
        "Hindi": {
            "main_title": "ЁЯОУ рдмреАрдорд╛ рджрд╛рд╡рд╛ рд╕рд╣рд╛рдпрдХ",
            "subtitle": "рдЕрдкрдиреА рдЖрд╡рд╛рдЬрд╝ рдпрд╛ рдЯреЗрдХреНрд╕реНрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ рдмреАрдорд╛ рдбреЗрдЯрд╛ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВ",
            "chat_with_us": "ЁЯТм рд╣рдорд╕реЗ рдЪреИрдЯ рдХрд░реЗрдВ",
            "settings": "тЪЩя╕П рд╕реЗрдЯрд┐рдВрдЧреНрд╕",
            "voice_settings": "ЁЯОд рдЖрд╡рд╛рдЬрд╝ рд╕реЗрдЯрд┐рдВрдЧреНрд╕",
            "listen_duration": "рдореБрдЭреЗ рдХрд┐рддрдиреА рджреЗрд░ рд╕реБрдирдирд╛ рдЪрд╛рд╣рд┐рдП? (рд╕реЗрдХрдВрдб)",
            "voice_auto_submit_info": "ЁЯТб **рдЖрд╡рд╛рдЬрд╝ рдСрдЯреЛ-рд╕рдмрдорд┐рдЯ:** 5 рд╕реЗрдХрдВрдб рд╕реЗ рдЕрдзрд┐рдХ рдмреЛрд▓реЗрдВ рдФрд░ рдЖрдкрдХрд╛ рдкреНрд░рд╢реНрди рд╕реНрд╡рдЪрд╛рд▓рд┐рдд рд░реВрдк рд╕реЗ рдЬрдорд╛ рд╣реЛ рдЬрд╛рдПрдЧрд╛!",
            "need_help": "тЭУ рдорджрдж рдЪрд╛рд╣рд┐рдП?",
            "show_help_guide": "ЁЯУЪ рд╕рд╣рд╛рдпрддрд╛ рдЧрд╛рдЗрдб рджрд┐рдЦрд╛рдПрдВ",
            "recent_searches": "ЁЯХР рд╣рд╛рд▓ рдХреА рдЦреЛрдЬреЗрдВ",
            "ask_question": "ЁЯТм рдЕрдкрдирд╛ рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВ",
            "question_placeholder": "рдпрд╣рд╛рдБ рдЕрдкрдирд╛ рдкреНрд░рд╢реНрди рдЯрд╛рдЗрдк рдХрд░реЗрдВ рдФрд░ Enter рджрдмрд╛рдПрдВ... (рдЬреИрд╕реЗ, 'рдХрд┐рддрдиреА рдкреЙрд▓рд┐рд╕рд┐рдпрд╛рдВ рд╕рдХреНрд░рд┐рдп рд╣реИрдВ?')",
            "submit": "рдЬрдорд╛ рдХрд░реЗрдВ",
            "press_enter_hint": "ЁЯТб **Enter рджрдмрд╛рдПрдВ** рдЕрдкрдирд╛ рдкреНрд░рд╢реНрди рдЬрдорд╛ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП",
            "auto_submit_voice": "ЁЯЪА рдЖрдкрдХреЗ рдЖрд╡рд╛рдЬрд╝ рдХреЗ рдкреНрд░рд╢реНрди рдХреЛ рдСрдЯреЛ-рд╕рдмрдорд┐рдЯ рдХрд░ рд░рд╣реЗ рд╣реИрдВ...",
            "processing_selected": "ЁЯЪА рдЖрдкрдХреЗ рдЪреБрдиреЗ рдЧрдП рдкреНрд░рд╢реНрди рдХреЛ рдкреНрд░реЛрд╕реЗрд╕ рдХрд░ рд░рд╣реЗ рд╣реИрдВ...",
            "processing_question": "тМия╕П рдЖрдкрдХреЗ рдкреНрд░рд╢реНрди рдХреЛ рдкреНрд░реЛрд╕реЗрд╕ рдХрд░ рд░рд╣реЗ рд╣реИрдВ...",
            "finding_answer": "ЁЯФД рдЖрдкрдХрд╛ рдЙрддреНрддрд░ рдЦреЛрдЬ рд░рд╣реЗ рд╣реИрдВ...",
            "results_found": "ЁЯУК рдпрд╣ рдорд┐рд▓рд╛:",
            "found_results": "тЬЕ {count} рдкрд░рд┐рдгрд╛рдо рдорд┐рд▓реЗ",
            "no_results": "ЁЯдФ рдореБрдЭреЗ рдЖрдкрдХреЗ рдкреНрд░рд╢реНрди рдХрд╛ рдХреЛрдИ рдкрд░рд┐рдгрд╛рдо рдирд╣реАрдВ рдорд┐рд▓рд╛ред",
            "try_different": "ЁЯТб рдЕрд▓рдЧ рддрд░реАрдХреЗ рд╕реЗ рдкреВрдЫрдиреЗ рдХреА рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВ рдпрд╛ рдиреАрдЪреЗ рдХреЗ рд▓реЛрдХрдкреНрд░рд┐рдп рдкреНрд░рд╢реНрдиреЛрдВ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред",
            "something_wrong": "ЁЯШХ рдХреБрдЫ рдЧрд▓рдд рд╣реБрдЖред рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рдкреНрд░рд╢реНрди рдЕрд▓рдЧ рддрд░реАрдХреЗ рд╕реЗ рдкреВрдЫрдиреЗ рдХреА рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВред",
            "try_these": "ЁЯТб **рдЗрдирдХреЛ рдЖрдЬрд╝рдорд╛рдПрдВ:**",
            "ask_question_first": "тЪая╕П рдХреГрдкрдпрд╛ рдкрд╣рд▓реЗ рдПрдХ рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВ!",
            "use_voice": "### ЁЯОд рдпрд╛ рдЕрдкрдиреА рдЖрд╡рд╛рдЬрд╝ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ",
            "voice_auto_hint": "ЁЯТб рд╕реНрд╡рдЪрд╛рд▓рд┐рдд рд╕рдмрдорд┐рд╢рди рдХреЗ рд▓рд┐рдП 5 рд╕реЗрдХрдВрдб рд╕реЗ рдЕрдзрд┐рдХ рдмреЛрд▓реЗрдВ!",
            "voice_disabled": "ЁЯЪл **рдорд╛рдЗрдХреНрд░реЛрдлрд╝реЛрди рд╕рдВрдШрд░реНрд╖ рдХреЗ рдХрд╛рд░рдг рдЖрд╡рд╛рдЬрд╝ рдЗрдирдкреБрдЯ рдЕрдХреНрд╖рдо**",
            "check_microphone": "ЁЯФД рдорд╛рдЗрдХреНрд░реЛрдлрд╝реЛрди рдлрд┐рд░ рд╕реЗ рдЬрд╛рдВрдЪреЗрдВ",
            "start_speaking": "ЁЯОд рдмреЛрд▓рдирд╛ рд╢реБрд░реВ рдХрд░реЗрдВ",
            "upload_audio": "ЁЯУБ рдпрд╛ рдСрдбрд┐рдпреЛ рдлрд╝рд╛рдЗрд▓ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ",
            "upload_hint": "ЁЯТб рд╕рдорд░реНрдерд┐рдд рдкреНрд░рд╛рд░реВрдк: WAV (рдЕрдиреБрд╢рдВрд╕рд┐рдд), MP3, MP4, M4A тАв рдЕрдзрд┐рдХрддрдо рдЖрдХрд╛рд░: 25MB",
            "choose_audio": "рдПрдХ рдСрдбрд┐рдпреЛ рдлрд╝рд╛рдЗрд▓ рдЪреБрдиреЗрдВ",
            "upload_help": "рдЕрдкрдиреЗ рдкреНрд░рд╢реНрди рдХреЗ рд╕рд╛рде рдПрдХ рд╕реНрдкрд╖реНрдЯ рдСрдбрд┐рдпреЛ рд░рд┐рдХреЙрд░реНрдбрд┐рдВрдЧ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВред WAV рдкреНрд░рд╛рд░реВрдк рд╕рдмрд╕реЗ рдЕрдЪреНрдЫрд╛ рдХрд╛рдо рдХрд░рддрд╛ рд╣реИред",
            "file_too_large": "тЭМ рдлрд╝рд╛рдЗрд▓ рдмрд╣реБрдд рдмрдбрд╝реА! рдХреГрдкрдпрд╛ 25MB рд╕реЗ рдЫреЛрдЯреА рдлрд╝рд╛рдЗрд▓ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВред",
            "process_audio": "ЁЯФД рдСрдбрд┐рдпреЛ рдлрд╝рд╛рдЗрд▓ рдкреНрд░реЛрд╕реЗрд╕ рдХрд░реЗрдВ",
            "processing_audio": "рдЖрдкрдХреА рдСрдбрд┐рдпреЛ рдлрд╝рд╛рдЗрд▓ рдкреНрд░реЛрд╕реЗрд╕ рдХрд░ рд░рд╣реЗ рд╣реИрдВ...",
            "audio_success": "тЬЕ рдореИрдВрдиреЗ рд╕реБрдирд╛: {text}",
            "audio_failed": "тЭМ рдЖрдкрдХреА рдСрдбрд┐рдпреЛ рдлрд╝рд╛рдЗрд▓ рдкреНрд░реЛрд╕реЗрд╕ рдирд╣реАрдВ рдХрд░ рд╕рдХрд╛ред",
            "audio_solutions": "ЁЯТб **рдЗрди рд╕рдорд╛рдзрд╛рдиреЛрдВ рдХреЛ рдЖрдЬрд╝рдорд╛рдПрдВ:**",
            "popular_questions": "ЁЯФе рд▓реЛрдХрдкреНрд░рд┐рдп рдкреНрд░рд╢реНрди",
            "click_instant": "рддреБрд░рдВрдд рдкрд░рд┐рдгрд╛рдо рдХреЗ рд▓рд┐рдП рдиреАрдЪреЗ рдХрд┐рд╕реА рднреА рдкреНрд░рд╢реНрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ!",
            "back_to_main": "тЖР рдореБрдЦреНрдп рдкрд░ рд╡рд╛рдкрд╕",
            "footer_text": "ЁЯОУ **рдмреАрдорд╛ рджрд╛рд╡рд╛ рд╕рд╣рд╛рдпрдХ** | рдЖрд╡рд╛рдЬрд╝ рдпрд╛ рдЯреЗрдХреНрд╕реНрдЯ рдХреЗ рд╕рд╛рде рдкреНрд░рд╛рдХреГрддрд┐рдХ рд░реВрдк рд╕реЗ рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВ",
            "footer_help": "ЁЯТб рдорджрдж рдЪрд╛рд╣рд┐рдП? рддреБрд░рдВрдд рд╕рд╣рд╛рдпрддрд╛ рдХреЗ рд▓рд┐рдП \"рд╣рдорд╕реЗ рдЪреИрдЯ рдХрд░реЗрдВ\" рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ!",
            "quick_keywords": [
                "рдЖрд╡рд╛рдЬрд╝ рдЗрдирдкреБрдЯ рд╕рдорд╕реНрдпрд╛рдПрдВ", "рдбреЗрдЯрд╛рдмреЗрд╕ рдкреНрд░рд╢реНрди", "рдЙрдкрдпреЛрдЧ рдХреИрд╕реЗ рдХрд░реЗрдВ",
                "рддрдХрдиреАрдХреА рд╕рдорд╕реНрдпрд╛рдПрдВ", "рдСрдбрд┐рдпреЛ рдЕрдкрд▓реЛрдб", "рдкрд░рд┐рдгрд╛рдо рдирд╣реАрдВ рджрд┐рдЦ рд░рд╣реЗ",
                "рд╢реБрд░реБрдЖрдд рдХрд░рдирд╛", "рдЦрд╛рддрд╛ рд╕рдорд╕реНрдпрд╛рдПрдВ", "рдкреНрд░рджрд░реНрд╢рди рд╕рдорд╕реНрдпрд╛рдПрдВ"
            ],
            "quick_queries": [
                "рдХрд┐рддрдиреА рдкреЙрд▓рд┐рд╕рд┐рдпрд╛рдВ рд╕рдХреНрд░рд┐рдп рд╣реИрдВ?",
                "рдореБрдВрдмрдИ рд╕реЗ рд╕рднреА рджрд╛рд╡реЗ рджрд┐рдЦрд╛рдПрдВ",
                "'рдордзреБрдореЗрд╣' рдХреЗ рд╕рд╛рде рдмреАрдорд┐рдд рд╡реНрдпрдХреНрддрд┐рдпреЛрдВ рдХреА рд╕реВрдЪреА рдмрдирд╛рдПрдВ",
                "рд╕рднреА рджрд╛рд╡реЛрдВ рдХреА рдХреБрд▓ рд╕реНрд╡реАрдХреГрдд рд░рд╛рд╢рд┐ рдХреНрдпрд╛ рд╣реИ?",
                "рд╕рднреА рдЕрд╕реНрд╡реАрдХреГрдд рджрд╛рд╡реЗ рджрд┐рдЦрд╛рдПрдВ",
                "рджрд╛рд╡рд╛ CLM_001 рдХрд╛ рд╡рд┐рд╡рд░рдг рдХреНрдпрд╛ рд╣реИ?"
            ]
        },
        # NOTE: For brevity, translations for Telugu, Tamil, and Bengali are omitted here but were included in the original chatbot code.
        # You can add them back in if needed.
    }


# Initialize session state for language preference
if "user_language" not in st.session_state:
    st.session_state.user_language = "English"


def get_text(key):
    """Get translated text based on current language"""
    translations = get_interface_translations()
    return translations[st.session_state.user_language].get(key, translations["English"].get(key, key))


# Chat support related functions
def get_chatbot_response(user_message, language="English"):
    """Get response from chatbot in specified language"""
    try:
        model = genai.GenerativeModel('models/gemini-1.5-flash')

        chat_prompt = f"""
        You are a helpful and friendly customer support assistant for an Insurance Claims Assistant application.

        Guidelines:
        - Respond in the {language} language.
        - Be helpful, polite, and professional but friendly.
        - Keep responses concise and clear.
        - If the user asks technical questions about the app, provide helpful guidance.
        - If the issue is complex, suggest contacting a customer executive.
        - Use appropriate emojis to make responses friendly.

        User message: {user_message}

        Provide a helpful response:
        """

        response = model.generate_content(chat_prompt)
        return response.text.strip()
    except Exception as e:
        return f"I apologize, but I'm having trouble responding right now. Please try again or contact our customer executive. ЁЯШК"


def get_keywords_in_language(language):
    """Get keywords translated for the selected language"""
    translations = get_interface_translations()
    return translations.get(language, translations["English"])["quick_keywords"]


def get_keyword_mapping():
    """Get mapping of translated keywords back to English for processing"""
    return {
        # Hindi mappings
        "рдЖрд╡рд╛рдЬрд╝ рдЗрдирдкреБрдЯ рд╕рдорд╕реНрдпрд╛рдПрдВ": "Voice Input Issues",
        "рдбреЗрдЯрд╛рдмреЗрд╕ рдкреНрд░рд╢реНрди": "Database Questions",
        "рдЙрдкрдпреЛрдЧ рдХреИрд╕реЗ рдХрд░реЗрдВ": "How to Use",
        "рддрдХрдиреАрдХреА рд╕рдорд╕реНрдпрд╛рдПрдВ": "Technical Problems",
        "рдСрдбрд┐рдпреЛ рдЕрдкрд▓реЛрдб": "Audio Upload",
        "рдкрд░рд┐рдгрд╛рдо рдирд╣реАрдВ рджрд┐рдЦ рд░рд╣реЗ": "Results Not Showing",
        "рд╢реБрд░реБрдЖрдд рдХрд░рдирд╛": "Getting Started",
        "рдЦрд╛рддрд╛ рд╕рдорд╕реНрдпрд╛рдПрдВ": "Account Issues",
        "рдкреНрд░рджрд░реНрд╢рди рд╕рдорд╕реНрдпрд╛рдПрдВ": "Performance Issues",
        # Add other language mappings here if needed
    }


def show_chat_page():
    """Render the chat support interface"""
    st.markdown("""
    <style>
        .chat-container {
            max-height: 400px;
            overflow-y: auto;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 20px;
            margin: 20px 0;
        }

        .chat-message {
            margin: 10px 0;
            padding: 12px 16px;
            border-radius: 18px;
            max-width: 80%;
            word-wrap: break-word;
        }

        .user-message {
            background: #ffffff;
            color: #333;
            margin-left: auto;
            margin-right: 0;
            text-align: right;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .bot-message {
            background: linear-gradient(135deg, #84fab0 0%, #8fd3f4 100%);
            color: #2c3e50;
            margin-left: 0;
            margin-right: auto;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .keyword-button {
            background: linear-gradient(45deg, #ff6b6b, #ffa500);
            color: white;
            border: none;
            padding: 8px 16px;
            margin: 5px;
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 14px;
        }

        .keyword-button:hover {
            transform: scale(1.05);
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        }

        .call-executive-btn {
            background: linear-gradient(45deg, #e74c3c, #c0392b);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 25px;
            font-weight: bold;
            font-size: 16px;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        }

        .call-executive-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0,0,0,0.3);
        }

        .language-selector {
            background: #f8f9fa;
            padding: 10px;
            border-radius: 10px;
            margin: 10px 0;
        }

        .chat-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            border-radius: 15px;
            text-align: center;
            margin-bottom: 20px;
        }
    </style>
    """, unsafe_allow_html=True)

    # Chat header
    st.markdown("""
    <div class="chat-header">
        <h2>ЁЯТм Chat with Us! We're Here to Help! ЁЯдЧ</h2>
        <p>Ask us anything in your preferred language</p>
    </div>
    """, unsafe_allow_html=True)

    # Language selection
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        selected_language = st.selectbox(
            "ЁЯМН Choose your language:",
            ["English", "Hindi", "Telugu", "Tamil", "Marathi", "Bengali", "Gujarati", "Kannada", "Malayalam",
             "Punjabi"],
            key="chat_language"
        )

    # Initialize chat history
    if "chat_messages" not in st.session_state:
        st.session_state.chat_messages = [
            {
                "role": "bot",
                "content": f"Hello! ЁЯСЛ I'm here to help you with any questions about our Insurance Claims Assistant. How can I assist you today? ЁЯШК",
                "timestamp": datetime.datetime.now()
            }
        ]

    # Keywords section (translated)
    st.markdown("### ЁЯФН Quick Help Keywords")
    st.caption("Click on any keyword for instant help!")

    keywords = get_keywords_in_language(selected_language)

    # Display keywords in grid
    cols = st.columns(3)
    for i, keyword in enumerate(keywords):
        with cols[i % 3]:
            if st.button(f"ЁЯФз {keyword}", key=f"keyword_{i}"):
                # Auto-submit keyword question
                keyword_response = get_keyword_response(keyword, selected_language)
                st.session_state.chat_messages.append({
                    "role": "user",
                    "content": keyword,
                    "timestamp": datetime.datetime.now()
                })
                st.session_state.chat_messages.append({
                    "role": "bot",
                    "content": keyword_response,
                    "timestamp": datetime.datetime.now()
                })
                st.rerun()

    # Chat display area
    st.markdown("### ЁЯТн Chat History")

    # Create chat container
    chat_container = st.container()

    with chat_container:
        for message in st.session_state.chat_messages[-10:]:  # Show last 10 messages
            if message["role"] == "user":
                st.markdown(f"""
                <div class="chat-message user-message">
                    <strong>You:</strong> {message["content"]}
                    <br><small>{message["timestamp"].strftime("%H:%M")}</small>
                </div>
                """, unsafe_allow_html=True)
            else:
                st.markdown(f"""
                <div class="chat-message bot-message">
                    <strong>Assistant:</strong> {message["content"]}
                    <br><small>{message["timestamp"].strftime("%H:%M")}</small>
                </div>
                """, unsafe_allow_html=True)

    # Chat input
    st.markdown("### тЬПя╕П Type Your Message")

    with st.form(key="chat_form", clear_on_submit=True):
        user_input = st.text_area(
            "",
            placeholder=f"Type your message in {selected_language}...",
            height=100,
            label_visibility="collapsed"
        )

        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            chat_submit = st.form_submit_button("ЁЯУд Send Message", use_container_width=True)

    if chat_submit and user_input:
        # Add user message
        st.session_state.chat_messages.append({
            "role": "user",
            "content": user_input,
            "timestamp": datetime.datetime.now()
        })

        # Get bot response
        with st.spinner("ЁЯдФ Thinking..."):
            bot_response = get_chatbot_response(user_input, selected_language)

        # Add bot response
        st.session_state.chat_messages.append({
            "role": "bot",
            "content": bot_response,
            "timestamp": datetime.datetime.now()
        })

        st.rerun()

    # Call executive button
    st.markdown("### ЁЯУЮ Need More Help?")

    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        if st.button("ЁЯУЮ Call Customer Executive", key="call_executive"):
            show_call_executive_info()


def get_keyword_response(keyword, language):
    """Get specific response for selected keyword"""
    # Map translated keyword back to English for lookup
    keyword_mapping = get_keyword_mapping()
    english_keyword = keyword_mapping.get(keyword, keyword)

    responses = {
        "Voice Input Issues": {
            "English": "ЁЯОд For voice input issues: 1) Check microphone permissions 2) Close other audio apps 3) Speak clearly 4) Try using Chrome browser. Need more help? ЁЯШК",
            "Hindi": "ЁЯОд рдЖрд╡рд╛рдЬрд╝ рдЗрдирдкреБрдЯ рдХреА рд╕рдорд╕реНрдпрд╛рдУрдВ рдХреЗ рд▓рд┐рдП: 1) рдорд╛рдЗрдХреНрд░реЛрдлрд╝реЛрди рдЕрдиреБрдорддрд┐рдпрд╛рдБ рдЬрд╛рдБрдЪреЗрдВ 2) рдЕрдиреНрдп рдСрдбрд┐рдпреЛ рдРрдк рдмрдВрдж рдХрд░реЗрдВ 3) рд╕реНрдкрд╖реНрдЯ рд░реВрдк рд╕реЗ рдмреЛрд▓реЗрдВ 4) Chrome рдмреНрд░рд╛рдЙрдЬрд╝рд░ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред рдФрд░ рдорджрдж рдЪрд╛рд╣рд┐рдП? ЁЯШК",
        },
        "Database Questions": {
            "English": "ЁЯУК Our database contains policy, claims, and insured persons data. You can ask questions like 'How many policies are active?' or 'Show claims from Mumbai'. What would you like to know? ЁЯдУ",
            "Hindi": "ЁЯУК рд╣рдорд╛рд░реЗ рдбреЗрдЯрд╛рдмреЗрд╕ рдореЗрдВ рдкреЙрд▓рд┐рд╕реА, рджрд╛рд╡реЗ рдФрд░ рдмреАрдорд┐рдд рд╡реНрдпрдХреНрддрд┐рдпреЛрдВ рдХрд╛ рдбреЗрдЯрд╛ рд╣реИред рдЖрдк 'рдХрд┐рддрдиреА рдкреЙрд▓рд┐рд╕рд┐рдпрд╛рдВ рд╕рдХреНрд░рд┐рдп рд╣реИрдВ?' рдпрд╛ 'рдореБрдВрдмрдИ рд╕реЗ рд╕рднреА рджрд╛рд╡реЗ рджрд┐рдЦрд╛рдПрдВ' рдЬреИрд╕реЗ рдкреНрд░рд╢реНрди рдкреВрдЫ рд╕рдХрддреЗ рд╣реИрдВред рдЖрдк рдХреНрдпрд╛ рдЬрд╛рдирдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ? ЁЯдУ",
        }
    }

    # Default response if keyword not found or language not available
    default_response = {
        "English": f"I'd be happy to help you with {keyword}! Could you please provide more details about your specific issue? ЁЯШК",
        "Hindi": f"рдореБрдЭреЗ {keyword} рдХреЗ рд╕рд╛рде рдЖрдкрдХреА рдорджрдж рдХрд░рдиреЗ рдореЗрдВ рдЦреБрд╢реА рд╣реЛрдЧреА! рдХреНрдпрд╛ рдЖрдк рдХреГрдкрдпрд╛ рдЕрдкрдиреА рд╡рд┐рд╢рд┐рд╖реНрдЯ рд╕рдорд╕реНрдпрд╛ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдФрд░ рд╡рд┐рд╡рд░рдг рджреЗ рд╕рдХрддреЗ рд╣реИрдВ? ЁЯШК",
    }

    try:
        return responses.get(english_keyword, default_response).get(language, default_response["English"])
    except:
        return default_response.get(language, default_response["English"])


def show_call_executive_info():
    """Show customer executive contact information"""
    st.success("ЁЯУЮ **Customer Executive Contact Information**")

    col1, col2 = st.columns(2)

    with col1:
        st.info("""
        **ЁЯУЮ Phone Support:**
        тАв Toll Free: 1800-123-4567
        тАв Direct: +91-1234567219
        тАв Available: 9 AM - 9 PM (IST)
        """)

    with col2:
        st.info("""
        **ЁЯТм Other Support:**
        тАв Email: support@insuranceassist.com
        тАв WhatsApp: +91-1234567219
        тАв Live Chat: Available 24/7
        """)

    st.warning("тП░ **Current Status:** Our executives are available now! Average wait time: 2-3 minutes")

    # Callback request form
    st.markdown("### ЁЯУЭ Request a Callback")

    with st.form("callback_form"):
        callback_name = st.text_input("Your Name:")
        callback_phone = st.text_input("Phone Number:")
        callback_issue = st.text_area("Brief description of your issue:")

        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            callback_submit = st.form_submit_button("ЁЯУЮ Request Callback", use_container_width=True)

    if callback_submit and callback_name and callback_phone:
        st.success(f"тЬЕ **Callback requested successfully!**")
        st.info(f"Thank you {callback_name}! Our executive will call you at {callback_phone} within 15 minutes.")

        # Store callback request (in real app, this would go to a database)
        if "callback_requests" not in st.session_state:
            st.session_state.callback_requests = []

        st.session_state.callback_requests.append({
            "name": callback_name,
            "phone": callback_phone,
            "issue": callback_issue,
            "timestamp": datetime.datetime.now()
        })


def preprocess_voice_input(text):
    """Clean and preprocess voice input to make it more SQL-friendly"""
    if not text:
        return text

    # Convert to lowercase for processing
    text = text.lower().strip()

    # Common voice input corrections and removals
    corrections = {
        "to": "2", "too": "2", "two": "2",
        "for": "4", "four": "4", "fore": "4",
        "won": "1", "one": "1",
        "tree": "3", "three": "3",
        "ate": "8", "eight": "8",
        "nine": "9", "nein": "9",
        "how many": "count", "show me": "select", "give me": "select",
        "find": "select", "get": "select", "list": "select", "tell me": "select",
        "policies": "policy", "claims": "claim", "persons": "person",
        "um": "", "uh": "", "like": "", "you know": "", "please": "",
        "can you": "", "could you": "", "i want": "", "i need": "", "i would like": ""
    }

    for wrong, correct in corrections.items():
        text = text.replace(wrong, correct)

    text = " ".join(text.split())

    if text:
        text = text[0].upper() + text[1:]

    return text


def get_gemini_response(question, prompt):
    """Enhanced Gemini response with better error handling and preprocessing for the new database"""
    try:
        processed_question = preprocess_voice_input(question)
        model = genai.GenerativeModel('models/gemini-1.5-flash')
        response = model.generate_content([prompt, processed_question])
        cleaned_response = response.text.strip().replace("```sql", "").replace("```", "").strip()
        cleaned_response = cleaned_response.replace("sql", "").replace("SQL", "").strip()

        # A simple validation to check for SQL keywords
        if not any(
                keyword in cleaned_response.upper() for keyword in ['SELECT', 'INSERT', 'UPDATE', 'DELETE', 'CREATE']):
            return "SELECT 'I could not generate a valid SQL query. Please try rephrasing your question.' AS Error;"

        return cleaned_response
    except Exception as e:
        return f"SELECT 'An error occurred: {str(e)}' AS Error;"


def read_sql_query(sql, db_name="insurance_claims.db"):
    """Execute SQL query and return results and column names"""
    try:
        conn = sqlite3.connect(db_name)
        cur = conn.cursor()
        cur.execute(sql)
        rows = cur.fetchall()
        column_names = [description[0] for description in cur.description] if cur.description else []
        conn.close()
        return rows, column_names
    except Exception as e:
        return [(f"Error executing query: {str(e)}",)], ["Error"]


def check_microphone_availability():
    """Check if microphone is available and not being used by other apps"""
    try:
        r = sr.Recognizer()
        with sr.Microphone() as source:
            r.adjust_for_ambient_noise(source, duration=0.1)
        return True, "Microphone available"
    except Exception as e:
        return False, f"тЭМ Could not access microphone: {str(e)}"


# The rest of the voice processing, audio file handling, and other utility functions
# from the original chatbot code remain largely the same.
# For brevity, they are not all repeated here but should be included in your final script.
# ... (speech_to_text_google_with_conflict_detection, process_audio_file, etc.)


# Updated prompt for the new insurance_claims.db
prompt = """
You are an expert in converting natural language questions into SQL queries for an insurance claims database.

Database Schema:
- POLICIES(policy_id, policy_type, policy_name, base_sum_insured, status)
- INSURED_PERSONS(insured_id, name, date_of_birth, gender, city, state, policy_id)
- CLAIMS(claim_id, policy_id, insured_id, coverage_id, status, claim_date, claim_amount, approved_amount, description)
- PREEXISTING_CONDITIONS(condition_id, insured_id, condition_name)
- COVERAGE_TYPES(coverage_id, coverage_name, description)

Instructions:
1.  Convert natural language to a valid SQLite query.
2.  Return ONLY the SQL query, no explanations.
3.  Join tables when necessary to answer the question. For example, to find claims by city, join CLAIMS and INSURED_PERSONS.
4.  Handle common questions about counts, sums, and filtering.

Examples:
- "How many policies are active?" -> SELECT COUNT(*) FROM POLICIES WHERE status = 'ACTIVE';
- "Show all claims from Mumbai" -> SELECT c.* FROM CLAIMS c JOIN INSURED_PERSONS ip ON c.insured_id = ip.insured_id WHERE ip.city = 'Mumbai';
- "List insured persons with 'Diabetes' as a pre-existing condition" -> SELECT ip.name, ip.city FROM INSURED_PERSONS ip JOIN PREEXISTING_CONDITIONS pc ON ip.insured_id = pc.insured_id WHERE pc.condition_name LIKE '%Diabetes%';
- "What is the total approved amount for all claims?" -> SELECT SUM(approved_amount) FROM CLAIMS;
"""

# Initialize session state variables
if "voice_input" not in st.session_state:
    st.session_state.voice_input = ""
if "use_voice_input" not in st.session_state:
    st.session_state.use_voice_input = False
if "query_history" not in st.session_state:
    st.session_state.query_history = []
if "voice_timeout" not in st.session_state:
    st.session_state.voice_timeout = 15
if "show_help" not in st.session_state:
    st.session_state.show_help = False
if "voice_auto_submit" not in st.session_state:
    st.session_state.voice_auto_submit = False
if "quick_query_submit" not in st.session_state:
    st.session_state.quick_query_submit = False
if "current_page" not in st.session_state:
    st.session_state.current_page = "main"


def render_chatbot_main_page():
    """Renders the main page of the chatbot."""
    # Language selection at the top
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        selected_language = st.selectbox(
            "ЁЯМН Choose your preferred language:",
            ["English", "Hindi"],  # Simplified for brevity
            key="interface_language",
            index=["English", "Hindi"].index(st.session_state.user_language)
        )

        if selected_language != st.session_state.user_language:
            st.session_state.user_language = selected_language
            st.rerun()

    # Main Header
    st.markdown(f'<h1 class="main-title">{get_text("main_title")}</h1>', unsafe_allow_html=True)
    st.markdown(f'<p class="subtitle">{get_text("subtitle")}</p>', unsafe_allow_html=True)

    # Main input section
    st.subheader(get_text("ask_question"))
    with st.form(key="question_form", clear_on_submit=False):
        question = st.text_input(
            "",
            value=st.session_state.get('voice_input', ''),
            placeholder=get_text("question_placeholder"),
            label_visibility="collapsed"
        )
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            enter_submitted = st.form_submit_button(get_text("submit"), type="primary", use_container_width=True)

    if st.session_state.get('use_voice_input', False):
        st.session_state.use_voice_input = False
        st.session_state.voice_input = ""

    submit = enter_submitted or st.session_state.get("voice_auto_submit", False) or st.session_state.get(
        "quick_query_submit", False)

    if submit and question:
        st.session_state.voice_auto_submit = False
        st.session_state.quick_query_submit = False
        with st.spinner(get_text("finding_answer")):
            sql_query = get_gemini_response(question, prompt)
            st.markdown("##### Generated SQL Query:")
            st.code(sql_query, language="sql")
            data, columns = read_sql_query(sql_query)

            st.subheader(get_text("results_found"))
            if data:
                df = pd.DataFrame(data, columns=columns)
                st.dataframe(df, use_container_width=True)
                st.success(get_text("found_results").format(count=len(data)))
            else:
                st.warning(get_text("no_results"))

    # Popular Questions
    st.subheader(get_text("popular_questions"))
    quick_queries = get_interface_translations()[st.session_state.user_language]["quick_queries"]
    cols = st.columns(2)
    for i, query in enumerate(quick_queries):
        with cols[i % 2]:
            if st.button(f"ЁЯУЭ {query}", key=f"quick_{i}"):
                st.session_state.voice_input = query
                st.session_state.use_voice_input = True
                st.session_state.quick_query_submit = True
                st.rerun()


# --- Page Rendering Functions ---

def render_document_processor_page():
    """Renders the main UI for the LLM Document Processing System."""
    st.markdown("<h1 style='text-align: center; color: #4B8BBE;'>ЁЯУД LLM Document Processing System</h1>",
                unsafe_allow_html=True)
    st.markdown(
        "<p style='text-align: center;'>Upload policy documents, contracts, or emails and ask questions in natural language.</p>",
        unsafe_allow_html=True)

    with st.sidebar:
        st.title("тЪЩя╕П Controls")
        if st.button("ЁЯТм Go to Chatbot Assistant", use_container_width=True):
            st.session_state.current_page = "chatbot"
            st.rerun()

        st.markdown("---")
        st.subheader("1. Upload Documents")
        uploaded_files = st.file_uploader(
            "Upload PDFs, Word docs, etc.",
            type=["pdf", "docx"],
            accept_multiple_files=True
        )

        if st.button("Process Documents", use_container_width=True, type="primary"):
            if uploaded_files:
                with st.spinner("Processing documents... This may take a moment."):
                    success = process_documents(uploaded_files)
                    if success:
                        st.success("Documents processed successfully! The system is ready for queries.")
                    else:
                        st.error("Failed to process documents. Please ensure files are valid and not empty.")
            else:
                st.warning("Please upload at least one document.")

    st.subheader("2. Ask a Question")
    query = st.text_input(
        "Enter your query:",
        placeholder="e.g., '46-year-old male, knee surgery in Pune, 3-month-old insurance policy'",
        help="Type your question about the uploaded documents here."
    )

    if st.button("Get Decision", use_container_width=True):
        if query:
            if not os.path.exists("faiss_vector_store.pkl"):
                st.error(
                    "You must process documents first. Please upload files and click 'Process Documents' in the sidebar.")
            else:
                with st.spinner("Analyzing query and searching documents..."):
                    result = process_query(query)
                    # ... (rest of the document processor display logic)


def render_chatbot_page():
    """Renders the integrated chatbot page."""
    with st.sidebar:
        st.title("тЪЩя╕П Navigation")
        if st.button("тмЕя╕П Back to Document Processor", use_container_width=True):
            st.session_state.current_page = "main"
            st.rerun()

    if st.session_state.get("show_chat_page", False):
        show_chat_page()
    else:
        render_chatbot_main_page()


# --- Main App Router ---
if __name__ == "__main__":
    # Ensure the database is created and populated on first run
    if not os.path.exists("insurance_claims.db"):
        db_setup = InsuranceClaimsDatabase()
        db_setup.create_tables()
        db_setup.insert_sample_data()
        db_setup.close_connection()
        st.toast("Database has been initialized with sample data!")

    if "current_page" not in st.session_state:
        st.session_state.current_page = "main"

    if st.session_state.current_page == "main":
        render_document_processor_page()
    elif st.session_state.current_page == "chatbot":
        render_chatbot_page()